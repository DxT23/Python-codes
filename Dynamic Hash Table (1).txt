class DynamicHashTable:
    def __init__(self, initial_capacity = 5):
        self.num_buckets = initial_capacity
        self.buckets = [[] for _ in range(self.num_buckets)]
        self.num_items = 0
    
    def simple_string_hash(self, s):
        hash_value = 0
        for char in s:
            hash_value = (hash_value * 31 + ord(char)) % self.num_buckets
        return hash_value
         
    def insert(self, key, value):
        index = self._hash(key)
        bucket = self.buckets[index]
        
        #check if the key already exists, and update
        for i, (k,v)in enumerate(bucket):
            if k == key:
                bucket[i] = (key, value)
                return
        #if it's a new key
        bucket.append((key, value))
        self.num_items +=1
        
        #Resize if load factor is too high
        if self.load_factor()> 0.75:
            self.resize()
    
    def search(self, key):
        index = self._hash(key)
        bucket = self.buckets[index]
        for k,v in bucket:
            if k == key:
                return v
        return None
        
    def delete(self,key):
        index = self._hash(key)
        bucket = self.buckets[index]
        for i, (k,v) in enumerate(bucket):
            if k == key:
                del bucket[i]
                self.num_items -= 1
                return True
        return False
        
    def load_factor(self):
        return self.num_items / self.num_buckets
            
    def resize(self):
        old_buckets = self.buckets
        self.num_buckets *=2 # Double the number of buckets
        self.buckets = [[] for _ in range(self.num_buckets)]
        self.num_items = 0 #Reset and re-add everything
            
        for bucket in old_buckets:
            for key, value in bucket:
                self.insert(key,value)# re-insert into new buckets
    
    def __str__(self):
        result = ""
        for i, bucket in enumerate(self.buckets):
            result += f"bucket {i}: {bucket}\n"
        return result
                
# Create the table
table = DynamicHashTable()

# Insert items
table.insert("apple", 100)
table.insert("banana", 200)
table.insert("cherry", 300)

# Search for items
print("Search apple:", table.search("apple"))   # Should print 100
print("Search banana:", table.search("banana")) # Should print 200
print("Search grape:", table.search("grape"))   # Should print None

# Update an item
table.insert("apple", 150)
print("Updated apple:", table.search("apple"))  # Should print 150

# Delete an item
print("Delete cherry:", table.delete("cherry")) # Should print True
print("Search cherry after delete:", table.search("cherry")) # Should print None

# Trigger resize
for i in range(20):
    table.insert(f"key{i}", i)

# Show load factor
print("Load factor:", table.load_factor())

#print the internal structure
print("\nHash table buckets:")
for i, bucket in enumerate(table.buckets):
    print(f"Bucket {i}: {bucket}")

        